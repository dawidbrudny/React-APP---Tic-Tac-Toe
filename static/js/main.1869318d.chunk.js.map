{"version":3,"sources":["functions/aiMode.js","functions/checkCell.js","functions/checkWinner.js","functions/clearStyles.js","functions/isBoardFull.js","functions/changePlayerCondition.js","functions/updateEmptyCells.js","components/Board.jsx","functions/currentPlayerInfo.js","components/CurrentPlayerInfo.jsx","functions/endGameMessage.js","components/PlayAgainButton.jsx","components/ChooseModeButton.jsx","components/ChooseModeSection.jsx","functions/chooseMode.js","components/Game.jsx","App.js","index.js"],"names":["aiMode","emptyCells","board","winningCombinations","cells","document","querySelectorAll","i","length","posA","posB","posC","value1","value2","value3","style","color","emptyCell","Math","floor","random","checkCell","e","index","currentPlayer","play","pvp","target","checkWinner","clearStyles","forEach","cell","isBoardFull","every","field","changePlayerCondition","updateEmptyCells","Object","entries","filter","cellEntry","map","Board","click","className","data-testid","id","onClick","currentPlayerInfo","square","circle","mode","CurrentPlayerInfo","endGameMessage","value","draw","PlayAgainButton","ChooseModeButton","name","ChooseModeSection","chooseMode","Game","state","isModeSelected","handleCellClick","changePlayerConditionFunc","setState","prevState","handleChooseModeButtonClick","setDafaults","componentDidUpdate","props","this","Component","defaultProps","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1869318d.chunk.js","sourcesContent":["export const aiMode = (emptyCells, board, winningCombinations) => {\r\n    const cells = document.querySelectorAll('div.cell');\r\n\r\n    for ( let i = 0; i <= winningCombinations.length-1; i++) {\r\n        const [posA, posB, posC] = winningCombinations[i];\r\n        const value1 = board[posA];\r\n        const value2 = board[posB];\r\n        const value3 = board[posC];\r\n\r\n        if (value1 === value2 && value1 !== '' && value3 === '') {\r\n            board[posC] = 'o';\r\n            cells[posC].style.color = 'blue';\r\n            return\r\n        }\r\n\r\n        if (value1 === value3 && value1 !== '' && value2 === '') {\r\n            board[posB] = 'o';\r\n            cells[posB].style.color = 'blue';\r\n            return\r\n        }\r\n\r\n        if (value2 === value3 && value2 !== '' && value1 === '') {\r\n            board[posA] = 'o';\r\n            cells[posA].style.color = 'blue';\r\n            return\r\n        }\r\n    }\r\n\r\n    const randomCell = Math.floor(Math.random() * emptyCells.length);\r\n    const emptyCell = emptyCells[randomCell];\r\n    cells[emptyCell].style.color = 'blue';\r\n    board[emptyCell] = 'o';\r\n}","export const checkCell = (e, board, index, currentPlayer, play, pvp) => {   \r\n    if (board[index] === '' && currentPlayer && play) {\r\n        board[index] = 'x';\r\n    }\r\n    \r\n    if (board[index] === '' && !currentPlayer && play && pvp) {\r\n        e.target.style.color = 'blue';\r\n        board[index] = 'o';\r\n    }\r\n}","export const checkWinner = (winningCombinations, board) => {\r\n    for (let i = 0; i <= winningCombinations.length-1; i++) {\r\n      const [posA, posB, posC] = winningCombinations[i];\r\n      const value1 = board[posA];\r\n      const value2 = board[posB];\r\n      const value3 = board[posC];\r\n\r\n      if (value1 !== '' && (value1 === value2 && value1 === value3)) {\r\n        return value1\r\n      }\r\n    }\r\n  }","export const clearStyles = () => {\r\n    const board = document.querySelectorAll('div.cell');\r\n\r\n    board.forEach(cell => cell.style.color = '')\r\n}","export const isBoardFull = board => {\r\n    return board.every(field => field !== '')\r\n}","export const changePlayerCondition = (board, index, play) => {\r\n    if (board[index] === '' && play) {\r\n        return true\r\n    } else return false\r\n}","export const updateEmptyCells = (board) => {\r\n    const emptyCells = Object.entries(board).filter(cellEntry => cellEntry[1] === '').map(cellEntry => cellEntry[0]);\r\n    return emptyCells\r\n}","import React from 'react';\r\n\r\nconst Board = ({ board, click }) => {\r\n\r\n    return ( \r\n        <section className='table' data-testid='table'>\r\n            {board.map((field, id) =>\r\n            <div key={id} id={id} className='cell' onClick={click}>{field}</div>\r\n            )}\r\n        </section>\r\n     );\r\n}\r\n \r\nexport default Board;","export const currentPlayerInfo = (play, currentPlayer, square, circle, pvp, mode) => {\r\n    if (!mode) return 'wybierz tryb';\r\n    if (play && pvp) return currentPlayer ? square : circle;\r\n    else if (play && !pvp) return 'gra z komputerem';\r\n    else return 'koniec gry';\r\n}","import React from 'react';\r\nimport { currentPlayerInfo } from '../functions/currentPlayerInfo';\r\n\r\nconst CurrentPlayerInfo = ({ currentPlayer, square, circle, play, pvp, mode }) => {\r\n    return ( \r\n        <h3 className='current-player' data-testid='current-player-info'>{currentPlayerInfo(play, currentPlayer, square, circle, pvp, mode)}</h3>\r\n     );\r\n}\r\n \r\nexport default CurrentPlayerInfo;","export const endGameMessage = (value, draw, pvp) => {\r\n    if (value && pvp) return `wygrana dla ${value === 'x' ? 'x' : 'o'}. jeszcze raz?`\r\n    else if (value && !pvp) return `${value === 'x' ? 'wygrana!' : 'przegrana...'} jeszcze raz?`;\r\n\r\n    if (draw) return `remis. jeszcze raz?`\r\n}","import React from 'react';\r\nimport { endGameMessage } from '../functions/endGameMessage';\r\n\r\nconst PlayAgainButton = ({ value, draw, click, pvp }) => {\r\n    return ( \r\n        <button className='play-again' data-testid='play-again-button' onClick={click}>{endGameMessage(value, draw, pvp)}</button>\r\n     );\r\n}\r\n \r\nexport default PlayAgainButton;","import React from 'react';\r\n\r\nconst ChooseModeButton = ({ click, name }) => {\r\n    return ( \r\n        <button className='choose-mode' onClick={() => click(name)}>{name}</button>\r\n     );\r\n}\r\n \r\nexport default ChooseModeButton;","import React from 'react';\r\nimport ChooseModeButton from './ChooseModeButton';\r\n\r\nconst ChooseModeSection = ({ click }) => {\r\n    return ( \r\n        <section className='choose-mode'>\r\n            <ChooseModeButton click={click} name='pvp' />\r\n            <ChooseModeButton click={click} name='komputer' />\r\n        </section>\r\n     );\r\n}\r\n \r\nexport default ChooseModeSection;","export const chooseMode = name => {\r\n    if (name === 'pvp') return true;\r\n    else if (name === 'komputer') return false\r\n}","import React, { Component, Fragment } from 'react';\r\n\r\nimport { aiMode } from '../functions/aiMode';\r\nimport { checkCell } from '../functions/checkCell';\r\nimport { checkWinner } from '../functions/checkWinner';\r\nimport { clearStyles } from '../functions/clearStyles';\r\nimport { isBoardFull } from '../functions/isBoardFull';\r\nimport { changePlayerCondition } from '../functions/changePlayerCondition';\r\nimport { updateEmptyCells } from '../functions/updateEmptyCells';\r\n\r\nimport Board from './Board';\r\nimport CurrentPlayerInfo from './CurrentPlayerInfo';\r\nimport PlayAgainButton from './PlayAgainButton';\r\nimport ChooseModeSection from './ChooseModeSection';\r\nimport { chooseMode } from '../functions/chooseMode';\r\n\r\nclass Game extends Component {\r\n\r\n    static defaultProps = {\r\n        square: 'Krzyżyk',\r\n        circle: 'Kółko',\r\n        winningCombinations: [\r\n            [0,1,2],\r\n            [3,4,5],\r\n            [6,7,8],\r\n            [0,3,6],\r\n            [1,4,7],\r\n            [2,5,8],\r\n            [0,4,8],\r\n            [2,4,6]\r\n          ]\r\n    }\r\n\r\n    state = { \r\n        board: ['','','','','','','','',''],\r\n        emptyCells: null,\r\n        currentPlayer: true,\r\n        play: false,\r\n        draw: false,\r\n        pvp: true,\r\n        isModeSelected: false\r\n    }\r\n\r\n    handleCellClick = (e, id = e.target.id) => {\r\n        const { board, currentPlayer, play, pvp } = this.state;\r\n\r\n        const changePlayerConditionFunc = changePlayerCondition(board, id, play);\r\n        checkCell(e, board, id, currentPlayer, play, pvp);\r\n        const emptyCells = updateEmptyCells(board);\r\n\r\n        if (play && changePlayerConditionFunc) {\r\n            this.setState(prevState => ({\r\n                board,\r\n                emptyCells,\r\n                currentPlayer: !prevState.currentPlayer\r\n            }))\r\n        }\r\n    }\r\n\r\n    handleChooseModeButtonClick = name => {\r\n        const mode = chooseMode(name);\r\n        this.setState({\r\n            pvp: mode,\r\n            play: true,\r\n            isModeSelected: true\r\n        })\r\n    }\r\n\r\n    setDafaults = () => {\r\n        clearStyles();\r\n        this.setState({\r\n            board: ['','','','','','','','',''],\r\n            currentPlayer: true,\r\n            draw: false,\r\n            isModeSelected: false\r\n        })\r\n    }\r\n\r\n    componentDidUpdate = () => {\r\n        const { winningCombinations } = this.props;\r\n        const { board, play, currentPlayer, pvp, emptyCells } = this.state;\r\n        // Checking the winner\r\n        if (checkWinner(winningCombinations, board) && play) {\r\n            this.setState({\r\n                play: false,\r\n            })\r\n        } \r\n        // Checking that is result of the game is draw\r\n        if (isBoardFull(board) && play) {\r\n            this.setState({\r\n                play: false,\r\n                draw: true\r\n            })\r\n        }\r\n        // AI MODE\r\n        if (play && !currentPlayer && !pvp && !checkWinner(winningCombinations, board) && !isBoardFull(board)) {\r\n            aiMode(emptyCells, board, winningCombinations);\r\n            this.setState(prevState => ({\r\n                board,\r\n                currentPlayer: !prevState.currentPlayer\r\n            }))\r\n        }\r\n    }\r\n\r\n    render() { \r\n\r\n        const { currentPlayer, board, play, draw, pvp, isModeSelected } = this.state;\r\n        const { square, circle, winningCombinations } = this.props;\r\n        const { handleCellClick, setDafaults, handleChooseModeButtonClick } = this;\r\n\r\n        return ( \r\n            <Fragment>\r\n                <CurrentPlayerInfo currentPlayer={currentPlayer} square={square} circle={circle} play={play} pvp={pvp} mode={isModeSelected} />\r\n                <Board board={board} click={handleCellClick} />\r\n                {isModeSelected && !play ? <PlayAgainButton value={checkWinner(winningCombinations, board)} draw={draw} click={setDafaults} pvp={pvp} /> : null}\r\n                {isModeSelected ? null : <ChooseModeSection click={handleChooseModeButtonClick} />}\r\n            </Fragment>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Game;","import React, { Component, Fragment } from 'react';\r\nimport './App.css'\r\n\r\nimport Game from './components/Game';\r\n\r\nclass App extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <Fragment>\r\n                <Game />\r\n            </Fragment>\r\n         );\r\n    }\r\n}\r\n \r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}